using System;
using System.Collections.Generic;

namespace ArgumentParser
{


//[ParameterCollection]
public partial class ParserExample
{
	//[Option(shortName: "o", longName: "option", description: "An example option", required: true)]
	public string Option { get; set; } = string.Empty;

	//[Positional(position: 0, description: "An example positional argument", required: true)]
	public string Positional { get; set; } = string.Empty;

	//[Flag(shortName: "f", longName: "flag", description: "An example flag")]
	public bool Flag { get; set; } = false;

	// the resulting Parse method will look like this:
	public static (ParserExample result, List<ArgumentParserException> errors) Parse(string[] args)
	{
		//create a new instance of the class
		var instance = new ParserExample();
		// create a list to hold any errors that occur during parsing
		var errors = new List<ArgumentParserException>();
		// predetermined collections of options, positional arguments, and flags
		// as generated by the source generator
		var options = new[] {
			new OptionAttribute("o", "option", "An example option", true),
		};
		var positionals = new[] {
			new PositionalAttribute(0, "An example positional argument", true),
		};
		var flags = new[] {
			new FlagAttribute("f", "flag", "An example flag"),
		};

		var tokens = new ArgumentTokenizer().TokenizeArguments(args, options, positionals, flags);



		return (instance, errors);
	}
}

}