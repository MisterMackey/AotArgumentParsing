using System;

namespace ArgumentParser;

//[ParameterCollection]
public partial class ParserExample
{
	//[Option(shortName: "o", longName: "option", description: "An example option", required: true)]
	public string Option { get; set; } = string.Empty;

	//[Positional(position: 0, description: "An example positional argument", required: true)]
	public string Positional { get; set; } = string.Empty;

	//[Flag(shortName: "f", longName: "flag", description: "An example flag")]
	public bool Flag { get; set; } = false;

	// the resulting Parse method will look like this:
	public static (ParserExample result, List<ArgumentParserException> errors) Parse(string[] args)
	{
		//create a new instance of the class
		var instance = new ParserExample();
		// create a list to hold any errors that occur during parsing
		var errors = new List<ArgumentParserException>();
		// predetermined collections of options, positional arguments, and flags
		// as generated by the source generator
		var options = new[] {
			new OptionAttribute("o", "option", "An example option", true),
		};
		var positionals = new[] {
			new PositionalAttribute(0, "An example positional argument", true),
		};
		var flags = new[] {
			new FlagAttribute("f", "flag", "An example flag"),
		};

		// normally this would be extracted into its own proper methods,
		// but this increases the risk of clobbering user written code so
		// we will inline it all and keep our promise of only generating
		// the Parse method

		string CategorizeArgument(string arg)
		{
			if (arg.StartsWith("--"))
			{
				// grab the long name
				string longName = arg.Substring(2);
				// check if it matches any of the options
				foreach (var option in options)
				{
					if (option.LongName == longName)
					{
						return "option";
					}
				}
				// check if it matches any of the flags
				foreach (var flag in flags)
				{
					if (flag.LongName == longName)
					{
						return "flag";
					}
				}
				// reached here? unknown argument
			}
				
		}

		// loop through the args array and parse the options, positionals, and flags
		for (int i = 0; i < args.Length; i++)
		{
			var arg = args[i];
			string argType = CategorizeArgument(arg);
		}
	}
}
